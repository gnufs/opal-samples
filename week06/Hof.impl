IMPLEMENTATION Hof

IMPORT Nat COMPLETELY

-- prodFun(f,start,ende) 
-- berechnet das Produkt f(start)*f(start+1)*...*f(ende)
-- FUN prodFun: (nat -> nat) ** nat ** nat -> nat
DEF prodFun == \\f,x0,x1.
    IF x0 > x1 THEN 1 ELSE
        f(x0) * prodFun(f,succ(x0),x1)
    FI


-- Funktionskomposition
-- o(f,g)(x) -> f(g(x))
FUN o: (nat -> nat) ** (nat -> nat) -> ( nat -> nat)
DEF (f o g) == \\x. f(g(x))


-- Anwendung zweier uebergebener Funktionen
FUN apply: (nat->nat) ** (nat -> nat)  **  nat -> nat ** nat
DEF apply == \\ f, g, x . (f(x),g(x)) 

-- Currying
FUN tupleAdd: nat ** nat -> nat
DEF tupleAdd == \\a,b. a+b 

FUN curryAdd: nat -> nat -> nat
DEF curryAdd == \\a. \\b. a+b

FUN applyAdd5 : nat -> nat ** nat
DEF applyAdd5 == \\x. apply(\\n. tupleAdd(5,n), curryAdd(5), x)

-- Hausaufgabe
-- Aufgabe 1.3
FUN sumFun: (nat -> nat) ** nat ** nat -> nat
DEF sumFun == \\f,x0,x1.
    IF x0 > x1 THEN 0 ELSE
        f(x0) + sumFun(f,succ(x0),x1)
    FI

FUN doublesumFun: (nat -> nat) ** nat ** nat -> nat
DEF doublesumFun == \\f,x0,x1.
    IF x0 > x1 THEN 0 ELSE
        sumFun(f,x0,x1) + doublesumFun(f,succ(x0),x1)
    FI
-- doublesumFun(succ,3,10) liefert 312.

--Aufgabe 1.4
FUN ^ : (nat -> nat) ** nat -> (nat -> nat)
DEF (f ^ n) == \\x.
    IF n = 0 THEN x ELSE
        f(x) * (f(x) ^ pred(n))
    FI
-- (half ^ 2) (16) liefert 64.

-- Aufgabe 2.2
-- nicht korrekt
-- FUN specCombine: (nat -> nat) ** nat -> (nat -> nat) ** nat -> (nat -> nat)
-- DEF specCombine == \\f,m. \\g,n. \\x.
--    IF m = 0 THEN f(g(x)) ELSE
--        IF n = 0 THEN specCombine(f(g(x)),pred(m)) ELSE
--            specCombine(f(x),m) (g(x),pred(n))
--        FI
--    FI
-- specCombine(pred,1)(pred,1)(10) liefert 8.
-- specCombine(succ,5)(pred,4)(1) liefert 2.
